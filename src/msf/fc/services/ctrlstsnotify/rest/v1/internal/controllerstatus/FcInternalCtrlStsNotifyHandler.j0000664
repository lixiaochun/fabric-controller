
package msf.fc.services.ctrlstsnotify.rest.v1.internal.controllerstatus;

import javax.ws.rs.Consumes;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import msf.fc.services.ctrlstsnotify.scenario.FcInternalCtrlStsNotifyFailureScenario;
import msf.fc.services.ctrlstsnotify.scenario.FcInternalCtrlStsNotifyLogScenario;
import msf.mfcfc.common.constant.OperationType;
import msf.mfcfc.common.constant.SystemInterfaceType;
import msf.mfcfc.common.log.MsfLogger;
import msf.mfcfc.core.scenario.RestResponseBase;
import msf.mfcfc.rest.common.AbstractRestHandler;
import msf.mfcfc.services.ctrlstsnotify.scenario.data.ControllerErrorNotificationRequest;
import msf.mfcfc.services.ctrlstsnotify.scenario.data.ControllerLogNotificationRequest;

/**
 * REST request handler class of the controller failure notification.
 *
 * @author NTT
 */
@Path("/v1/internal/controller_status_notification/ec_em")
public class FcInternalCtrlStsNotifyHandler extends AbstractRestHandler {

  private static final MsfLogger logger = MsfLogger.getInstance(FcInternalCtrlStsNotifyHandler.class);

  /**
   * Controller failure notification.
   *
   * @param requestBody
   *          Request message (Body part)
   *
   * @return response data
   */
  @PUT
  @Path("/failure")
  @Produces(MediaType.APPLICATION_JSON)
  @Consumes(MediaType.APPLICATION_JSON)
  public Response notifyFailure(String requestBody) {

    try {
      logger.methodStart();
      loggingRequestReceived();
      loggingRequestJsonBody(requestBody);
      ControllerErrorNotificationRequest request = new ControllerErrorNotificationRequest(requestBody, null, null);

      setCommonData(request);

      FcInternalCtrlStsNotifyFailureScenario scenario = new FcInternalCtrlStsNotifyFailureScenario(OperationType.NORMAL,
          SystemInterfaceType.INTERNAL);

      RestResponseBase restResponseBase = scenario.execute(request);
      return createResponse(restResponseBase);

    } finally {
      logger.methodEnd();
    }

  }

  /**
   * Controller log notification.
   *
   * @param requestBody
   *          Request message (Body part)
   *
   * @return response data
   */
  @PUT
  @Path("/log")
  @Produces(MediaType.APPLICATION_JSON)
  @Consumes(MediaType.APPLICATION_JSON)
  public Response notifyLog(String requestBody) {

    try {
      logger.methodStart();
      loggingRequestReceived();
      loggingRequestJsonBody(requestBody);
      ControllerLogNotificationRequest request = new ControllerLogNotificationRequest(requestBody, null, null);

      setCommonData(request);

      FcInternalCtrlStsNotifyLogScenario scenario = new FcInternalCtrlStsNotifyLogScenario(OperationType.NORMAL,
          SystemInterfaceType.INTERNAL);

      RestResponseBase restResponseBase = scenario.execute(request);
      return createResponse(restResponseBase);

    } finally {
      logger.methodEnd();
    }

  }
}
