
package msf.mfcfc.services.priorityroutes.scenario.nodes.data;

import java.text.MessageFormat;

import org.apache.commons.lang.builder.ToStringBuilder;

import com.google.gson.annotations.SerializedName;

import msf.mfcfc.common.constant.ErrorCode;
import msf.mfcfc.common.constant.PatchOperation;
import msf.mfcfc.common.exception.MsfException;
import msf.mfcfc.common.log.MsfLogger;
import msf.mfcfc.rest.common.RestRequestValidator;
import msf.mfcfc.services.priorityroutes.common.util.ParameterCheckUtil;
import msf.mfcfc.services.priorityroutes.scenario.nodes.data.entity.PriorityValueEntity;

public class NodeGroupPriorityCreateDeleteRequestBody implements RestRequestValidator {

  private static final MsfLogger logger = MsfLogger.getInstance(NodeGroupPriorityCreateDeleteRequestBody.class);

  @SerializedName("op")
  private String op;

  @SerializedName("path")
  private String path;

  @SerializedName("value")
  private PriorityValueEntity value;

  public String getOp() {
    return op;
  }

  public void setOp(String op) {
    this.op = op;
  }

  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }

  public PriorityValueEntity getValue() {
    return value;
  }

  public void setValue(PriorityValueEntity value) {
    this.value = value;
  }

  public PatchOperation getOpEnum() {
    return PatchOperation.getEnumFromMessage(op);
  }

  public void setOpEnum(PatchOperation op) {
    this.op = op.getMessage();
  }

  @Override
  public void validate() throws MsfException {
    try {
      logger.methodStart();

      ParameterCheckUtil.checkNotNull(getOpEnum());

      switch (getOpEnum()) {
        case ADD:
          validateAddOp();
          break;
        case REMOVE:
          validateRemoveOp();
          break;
        case COPY:
        case MOVE:
        case REPLACE:
        case TEST:
          String logMsg = "op must match ADD or REMOVE.";
          logger.error(logMsg);
          throw new MsfException(ErrorCode.PARAMETER_VALUE_ERROR, logMsg);
        default:

          throw new IllegalArgumentException(MessageFormat.format("op={0}", getOpEnum()));
      }

    } finally {
      logger.methodEnd();
    }
  }

  private void validateAddOp() throws MsfException {

    ParameterCheckUtil.checkPriorityroutesResourcePathFormat(path, true);

    if (value != null) {
      String logMsg = "value must be null.";
      logger.error(logMsg);
      throw new MsfException(ErrorCode.PARAMETER_VALUE_ERROR, logMsg);
    }
  }

  private void validateRemoveOp() throws MsfException {

    ParameterCheckUtil.checkPriorityroutesResourcePathFormat(path, false);

    if (value != null) {
      String logMsg = "value must be null.";
      logger.error(logMsg);
      throw new MsfException(ErrorCode.PARAMETER_VALUE_ERROR, logMsg);
    }
  }

  @Override
  public String toString() {
    return ToStringBuilder.reflectionToString(this);
  }
}
